//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(EFWorkshop.WorkshopContext),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets24f1d90d9ea7390b2e4f38802907d3816b511987b107ff14768f7febce3923b0))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySets24f1d90d9ea7390b2e4f38802907d3816b511987b107ff14768f7febce3923b0 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "24f1d90d9ea7390b2e4f38802907d3816b511987b107ff14768f7febce3923b0"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CodeFirstDatabase.Address")
            {
                return GetView0();
            }

            if (extentName == "CodeFirstDatabase.Student")
            {
                return GetView1();
            }

            if (extentName == "CodeFirstDatabase.Course")
            {
                return GetView2();
            }

            if (extentName == "CodeFirstDatabase.StudentClass")
            {
                return GetView3();
            }

            if (extentName == "CodeFirstDatabase.StudentCourse")
            {
                return GetView4();
            }

            if (extentName == "WorkshopContext.Addresses")
            {
                return GetView5();
            }

            if (extentName == "WorkshopContext.Students")
            {
                return GetView6();
            }

            if (extentName == "WorkshopContext.Courses")
            {
                return GetView7();
            }

            if (extentName == "WorkshopContext.StudentClasses")
            {
                return GetView8();
            }

            if (extentName == "WorkshopContext.Student_Courses")
            {
                return GetView9();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Address.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Address
        [CodeFirstDatabaseSchema.Address](T1.Address_StudentId, T1.Address_City, T1.Address_State)
    FROM (
        SELECT 
            T.StudentId AS Address_StudentId, 
            T.City AS Address_City, 
            T.State AS Address_State, 
            True AS _from0
        FROM WorkshopContext.Addresses AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Student.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Student
        [CodeFirstDatabaseSchema.Student](T1.Student_Id, T1.Student_Name, T1.Student_ClassId)
    FROM (
        SELECT 
            T.Id AS Student_Id, 
            T.Name AS Student_Name, 
            T.ClassId AS Student_ClassId, 
            True AS _from0
        FROM WorkshopContext.Students AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Course.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Course
        [CodeFirstDatabaseSchema.Course](T1.Course_Id, T1.Course_Name)
    FROM (
        SELECT 
            T.Id AS Course_Id, 
            T.Name AS Course_Name, 
            True AS _from0
        FROM WorkshopContext.Courses AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.StudentClass.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing StudentClass
        [CodeFirstDatabaseSchema.StudentClass](T1.StudentClass_Id, T1.StudentClass_Name)
    FROM (
        SELECT 
            T.Id AS StudentClass_Id, 
            T.Name AS StudentClass_Name, 
            True AS _from0
        FROM WorkshopContext.StudentClasses AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.StudentCourse.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing StudentCourse
        [CodeFirstDatabaseSchema.StudentCourse](T1.StudentCourse_StudentId, T1.StudentCourse_CourseId)
    FROM (
        SELECT 
            Key(T.Student_Courses_Source).Id AS StudentCourse_StudentId, 
            Key(T.Student_Courses_Target).Id AS StudentCourse_CourseId, 
            True AS _from0
        FROM WorkshopContext.Student_Courses AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for WorkshopContext.Addresses.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Addresses
        [EFWorkshop.Address](T1.Address_StudentId, T1.Address_City, T1.Address_State)
    FROM (
        SELECT 
            T.StudentId AS Address_StudentId, 
            T.City AS Address_City, 
            T.State AS Address_State, 
            True AS _from0
        FROM CodeFirstDatabase.Address AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for WorkshopContext.Students.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Students
        [EFWorkshop.Student](T1.Student_Id, T1.Student_Name, T1.Student_ClassId)
    FROM (
        SELECT 
            T.Id AS Student_Id, 
            T.Name AS Student_Name, 
            T.ClassId AS Student_ClassId, 
            True AS _from0
        FROM CodeFirstDatabase.Student AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for WorkshopContext.Courses.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Courses
        [EFWorkshop.Course](T1.Course_Id, T1.Course_Name)
    FROM (
        SELECT 
            T.Id AS Course_Id, 
            T.Name AS Course_Name, 
            True AS _from0
        FROM CodeFirstDatabase.Course AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for WorkshopContext.StudentClasses.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing StudentClasses
        [EFWorkshop.StudentClass](T1.StudentClass_Id, T1.StudentClass_Name)
    FROM (
        SELECT 
            T.Id AS StudentClass_Id, 
            T.Name AS StudentClass_Name, 
            True AS _from0
        FROM CodeFirstDatabase.StudentClass AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for WorkshopContext.Student_Courses.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Student_Courses
        [EFWorkshop.Student_Courses](T3.[Student_Courses.Student_Courses_Source], T3.[Student_Courses.Student_Courses_Target])
    FROM (
        SELECT -- Constructing Student_Courses_Source
            CreateRef(WorkshopContext.Students, row(T2.[Student_Courses.Student_Courses_Source.Id]), [EFWorkshop.Student]) AS [Student_Courses.Student_Courses_Source], 
            T2.[Student_Courses.Student_Courses_Target]
        FROM (
            SELECT -- Constructing Student_Courses_Target
                T1.[Student_Courses.Student_Courses_Source.Id], 
                CreateRef(WorkshopContext.Courses, row(T1.[Student_Courses.Student_Courses_Target.Id]), [EFWorkshop.Course]) AS [Student_Courses.Student_Courses_Target]
            FROM (
                SELECT 
                    T.StudentId AS [Student_Courses.Student_Courses_Source.Id], 
                    T.CourseId AS [Student_Courses.Student_Courses_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.StudentCourse AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
    }
}
